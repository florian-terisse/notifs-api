plugins {
	id 'java'
	id 'application'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.hidetake.ssh' version '2.11.2'
}

group = 'fr.terisse.api'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	mapstructVersion = "1.5.5.Final"
	lombokVersion = "1.18.32"
	lombokMapstructBindingVersion = "0.2.0"
	pi4jVersion = "2.4.0"
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation('org.springframework.boot:spring-boot-starter-data-jpa') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}
	implementation('org.springframework.boot:spring-boot-starter-validation') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.23.1' // Bridge Log4j2 to SLF4J

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation "org.projectlombok:lombok:${lombokVersion}"

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}",
			"org.projectlombok:lombok:${lombokVersion}",
			"org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	implementation 'com.google.api-client:google-api-client:2.0.0'
	implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
	implementation 'com.google.cloud:google-cloud-texttospeech:2.38.0'
	implementation 'com.google.apis:google-api-services-calendar:v3-rev20220715-2.0.0'

	implementation 'org.apache.commons:commons-lang3:3.14.0'

	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// Dependencies for the device library and PI4J
	// Excluding the Google protobuf from the Schema library since it clashes with another library
	// The device library uses JSON exclusively so this is not an issue
	implementation "com.pi4j:pi4j-core:${pi4jVersion}"
	implementation "com.pi4j:pi4j-plugin-raspberrypi:${pi4jVersion}"
	implementation 'io.mapsmessaging:device_library:1.0.9-SNAPSHOT'
	implementation 'io.mapsmessaging:simple_logging:2.0.13-SNAPSHOT'
	implementation ('io.mapsmessaging:schemas:2.1.5-SNAPSHOT'){
		exclude group: 'com.google.protobuf', module: 'protobuf-java'
	}

}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	options.deprecation = true
}

configurations {
	// configuration that holds jars to include in the jar
	extraLibs
}

remotes {
	webServer {
		host = 'raspberrypi1'
		user = 'florian'
		identity = file('C:/Users/flori/.ssh/id_rsa')
	}
}

tasks .register('deploy') {
	doLast {
		ssh.run {
			session(remotes.webServer) {
				put from: 'C:/Users/flori/OneDrive/Bureau/notif pompier/notifs-api/notifs-api/build/libs/notifs-api-0.0.1-SNAPSHOT.jar', into: '/data'
			}
		}
	}
}

tasks .register('restart') {
	doLast {
		ssh.run {
			session(remotes.webServer) {
				execute 'systemctl --user restart notifs-api.service'
			}
		}
	}
}